# # #print(list(inpit().split()).count("2"))
# #
# # # str = "Лена Обь Волга Дон Енисей"
# # # lst = sorted(list(str.split()))
# # # lst.pop(0)
# # # print(lst)
# #
# # # a = [5.4, 6.7, 10.4]
# # # b = "8 11"
# # # lst = list(map(int, b.split()))
# # # a.append(lst)
# # # print(a)
# #
# # # in1 = input()
# # # in2 = input()
# # # in3 = input()
# # # lst1 = list(map(str, in1.split()))
# # # lst2 = list(map(str, in2.split()))
# # # lst3 = list(map(str, in3.split()))
# # # lst = [lst1, lst2, lst3]
# # # print(lst)
# #
# # # in1 = input().split()
# # # in2 = input().split()
# # # in3 = input().split()
# # # print(in1[-1], in2[-1], in3[-1] )
# #
# # #
# # # print(input().split()[-1], input().split()[-1], input().split()[-1] )
# #
# # # a = [True, [1, 0, ["True", ["Истина", "Ложь"], "False"]], False]
# # # print(a[2][1][0])
# #
# # # t = [["Скажи-ка", "дядя", "ведь", "не", "даром"],
# # #     ["Я", "Python", "выучил", "с", "каналом"],
# # #     ["Балакирев", "что", "раздавал?"]]
# # # inp = "что"
# # # lst = sum(t,[])
# # # print(lst)
# # # print(inp in lst)
# #
# #
# # # x = list(map(float, input().split()))
# # # if x[0] > x[1]:
# # #     print(x[0])
# # # else:
# # #     print(x[1])
# #
# # # str1 = input().lower()
# # # str2 = str1[::-1]
# # # if str1 in str2:
# # #     print("ДА")
# # # else:
# # #     print("НЕТ")
# #
# # # m, n = map(int, input().split())
# # # if (m % n == 0):
# # #     print(int(m/n))
# # # else:
# # #     print(f"{m} на {n} нацело не делится")
# #
# # # #a, b, c = map(int, input().split())
# # # a, b, c = 3, 4, 5
# # # if a**2 + b**2 == c**2:
# # #     print("ДА")
# # # else:
# # #     print("НЕТ")
# #
# # # a = int(input())
# # # if a % 10 == 7:
# # #     print("ДА")
# # # else:
# # #     print("НЕТ")
# # #
# # # print('НДЕАТ'[input()[-1]=='7'::2])
# #
# # # str = "Python"
# # # str = input().lower()
# # # if str.index("t") >= 0 and str.index("h") >= 0 and str.index("o") >= 0:
# # #     print("ДА")
# # # else:
# # #     print("НЕТ")
# #
# # str = "Python"
# # # str = input().lower()
# # if "t" in str and "h" in str and "o" in str:
# #     print("ДА")
# # else:
# # #     print("НЕТ")
# #
# # lst = list(input().split())
# # if "Москва" in lst:
# #     lst.remove("Москва")
# # print(*lst)
#
# # a, b, c, d = map(int,input().split())
# # if (a > c + 1 and b > d +1) or (a > d +1 and b > c +1):
# #     print("ДА")
# # else:
# #     print("НЕТ")
#
#
# # num = list(map(int, input()))
# # if sum(num[0:3]) == sum(num[3:7]):
# #     print("ДА")
# # else:
# #     print("НЕТ")
# #
# # t = float(input())
# # if  t < 3 or t % 5 < 3:
# #     print("green")
# # else:
# #     print("red")
#
# # m = '''1. Введение в Python
# # 2. Строки и списки
# # 3. Условные операторы
# # 4. Циклы
# # 5. Словари, кортежи и множества
# # 6. Выход'''
# # menu = list(m.split("\n"))
# # c = input()
# # if c == "1":
# #     print(menu[0])
# # elif c == "2":
# #     print(menu[1])
# # elif c == "3":
# #     print(menu[2])
# # elif c == "4":
# #     print(menu[3])
# # elif c == "5":
# #     print(menu[4])
# # elif c == "6":
# #     print(menu[5])
# # else: print("не верный выбор")
#
# # a, b, c = map(int, input().split())
# # if a < b:
# #     if a < c:
# #         print(a)
# #     else: print(c)
# # elif b < c:
# #     print(b)
# # else:
# #     print(c)
#
# # m = float(input())
# # if m <= 60:
# #     print(1)
# # elif m <= 64:
# #     print(2)
# # elif m <= 69:
# #     print(3)
# # else:
# #     print(4)
#
# day = int(input())
# if day == 1:
#     print("Понедельник")
# elif day == 2:
#     print("Вторник")
# elif day == 3:
#     print("Среда")
# elif day == 4:
#     print("Четверг")
# elif day == 5:
#     print("Пятница")
# elif day == 6:
#     print("Суббота")
# elif day == 7:
#     print("Воскресенье")

# arr = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
# month = int(input())
# if 0 < month <= 12:
#     print(arr[month])
# else:
#     print("Выпей чаю")

# m, n = 8, 1
# # m, n = map(int, input().split())
# day = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
# if n == 1:
#     print(f"{m-1:02}.{day[m-1]:02} {m:02}.{n+1:02}")
# elif n == day[m]:
#     print(f"{m:02}.{n-1:02} {m+1:02}.01")
# else:
#     print(f"{m:02}.{n-1:02} {m:02}.{n+1:02}")

# k = int(input())
# days = ["0", "понедельник", "вторник", "среда", "четверг", "пятница", "суббота", "воскресенье"]
# print(str(days[k % 7]))

# a = float(input())
# b = float(input())
# print(a if a > b else b)

# a = int(input())
# print(msg := "кратно 3" if int(input()) % 3 == 0 else "не кратно 3")

# text = input().lower()
# print(msg := "палиндром" if text == text[::-1] else "не палиндром")

# print("True" if int(input()) != 0  else "False")

# a = int(input())
# print("0" if a == 59 else a+1)

# m = ['', 'до', 'ре', 'ми', 'фа', 'соль', 'ля', 'си']
# a, b, c = map(int, input().split())
# print(("#"+m[a] if m[a] == ("до" or "фа") else m[a]) + " " +
#       ("#"+m[b] if m[b] == ("до" or "фа") else m[b]) + " " +
#       ("#"+m[c] if m[c] == ("до" or "фа") else m[c]))

# cost = float(input())
# i = 2
# while i <= 10:
#     print(round(cost * i, 1), end=" ")
#     i += 1

# n = int(input())
# i = 1
# s = 0
# while i <= n:
#     s += 1/i
#     i += 1
# print(round(s, 3))

# s = 0
# while (n := int(input())) != 0:
#     s += n
# print(s)

# text = input()
# while "--" in text:
#     text = text.replace("--", "-")
# print(text)

# n = int(input())
# x = 1
# while n > 1:
#     x = x * (n % 10)
#     n = n // 10
# print(x)

# n = int(input())
# lst = [1, 1]
# i = 0
# while i < n-2:
#     lst.append(lst[i] + lst[i+1])
#     i += 1
# print(lst)

'''
Подвиг 9. Одноклеточная амеба каждые 3 часа делится на 2 клетки. Определить,
сколько клеток будет через n часов (n - целое положительное число, вводимое
с клавиатуры). Считать, что изначально была одна амеба. Результат вывести
на экран. Задачу необходимо решить с использованием цикла while.
Sample Input:
11
Sample Output:
8
'''
import subprocess
import sys

# n = int(input())
# a = 1
# while i := 1 <= n:
#     if i % 3 == 0:
#         a *= 2
#     i += 1
# print(a)

'''
Подвиг 10. Гражданин 1 января открыл счет в банке, вложив 1000 руб.
Каждый год размер вклада увеличивается на 5% от имеющейся суммы.
 Определить сумму вклада через n лет (n - целое положительное число, 
 вводимое с клавиатуры). Результат округлить до сотых и вывести на экран. 
 Программу реализовать при помощи цикла while.
Sample Input:
5
Sample Output:
1276.28'''

# n = int(input())
# start = 1000
# i = 1
# while i <= n:
#     start += + start*5/100
#     i += 1
# print(round(start, 2))

'''Подвиг 11. Вводятся два натуральных четных числа n и m в одну строчку через пробел, 
причем n < m. Напечатать все нечетные числа из интервала [n, m]. Задачу
 решить без применения условного оператора. Результат вывести на экран 
 в виде строки чисел, записанных через пробел. Программу реализовать при помощи цикла while.

Sample Input:

2 10
Sample Output:

3 5 7 9'''

# n, m = map(int, input().split())
# while n < m:
#     n += 1
#     print(n, end=" ")
#     n += 1

'''Подвиг 12. Составить программу поиска всех трехзначных чисел, 
которые при делении на 47 дают в остатке 43 и кратны 3. 
Вывести найденные числа в строчку через пробел. Программу реализовать при помощи цикла while.

Sample Input:

Sample Output:

231 372 513 654 795 936'''

# start = 100
# finish = 999
# while start <= finish:
#     if start % 47 == 43 and start % 3 == 0:
#         print(start, end=" ")
#     start += 1

'''Подвиг 2. Имеется одномерный список длиной 10 элементов, состоящий из нулей:p = [0] * 10
На каждой итерации цикла пользователь вводит целое число 
- индекс элемента списка p, по которому записывается значение 1,
 если ее там еще нет. Если же 1 уже проставлена, то список не менять и снова запросить 
 у пользователя очередное число. Необходимо расставить так пять единиц в список. (После этого цикл прерывается).
Программу реализовать с помощью цикла while и с использованием оператора continue, 
когда 1 не может быть добавлена в список. Результат вывести на экран в виде последовательности чисел, записанных через пробел.
Sample Input:
1
2
2
5
7
5
9
Sample Output:
0 1 1 0 0 1 0 1 0 1'''

# p = [0] * 10
# i = 0
# count = 0
# while count < 6:
#     i = int(input())
#     if p[i] == 1:
#         continue
#     else:
#         p[i] = 1
#         count += 1
# print(*p)
'''Подвиг 3. На каждой итерации цикла вводится целое число. 
Необходимо подсчитать произведение только положительных чисел, 
до тех пор, пока не будет введено значение 0. Реализовать пропуск вычислений 
с помощью оператора continue, а также использовать цикл while. Результат произведения вывести на экран.
Sample Input:
2
-1
3
2
-5
7
0
Sample Output:
84'''
# p = 1
# n = 1
# while n != 0:
#     n = int(input())
#     if n <= 0:
#         continue
#     else:
#         p *= n
# print(p)
'''Подвиг 4. Вводится список названий городов в одну строчку через пробел.
 Определить, что в этом списке все города имеют длину более 5 символов. 
 Реализовать программу с использованием цикла while и оператора break. 
 Вывести ДА, если условие выполняется и НЕТ - в противном случае.
Sample Input:
Самара Ульяновск Новгород Воронеж
Sample Output:
ДА'''
# text = "Самара Ульяновск Новгород Мыс".split(" ")
# i = 1
# while i < len(text):
#     if len(text[i]) < 5:
#         print("НЕТ")
#         break
#     else:
#         i +=1
# else:
#     print("ДА")
'''Подвиг 5. Вводится список имен студентов в одну строчку через пробел. 
Определить, что хотя бы одно имя в этом списке начинается и заканчивается на ту же самую букву (без учета регистра). 
Реализовать программу с использованием цикла while и оператора break. Вывести ДА, если условие выполняется и НЕТ - в противном случае.
Sample Input:
Петр Анна Иван Сергей Михаил Федор
Sample Output:
ДА'''
# t = input().lower().split()
# while len(t):
#     x = t.pop()
#     if x[0] == x[-1]:
#         print("ДА")
#         break
# else:
#     print("НЕТ")
'''Подвиг 6. Вводится натуральное число n (то есть, целое положительное). 
В цикле перебрать все целые числа в интервале [1; n] и сформировать список из чисел, 
кратных 3 и 5 одновременно. Вывести полученную последовательность чисел в виде строки через пробел, 
если значение n меньше 100. Иначе вывести на экран сообщение "слишком большое значение n" (без кавычек). 
Использовать в программе оператор else после цикла while.
Sample Input 1:
49
Sample Output 1:
15 30 45
Sample Input 2:
100
Sample Output 2:
слишком большое значение n'''
# n = int(input())
# if n >= 100:
#     print("слишком большое значение n")
# else:
#     i = 0
#     while i < n:
#         i += 1
#         if i % 3 == 0 and i % 5 == 0:
#             print(i, end=" ")
'''Подвиг 7. Вводится натуральное число n. Вывести первое найденное натуральное число 
(то есть, перебирать числа, начиная с 1), квадрат которого больше значения n. 
Реализовать программу с использованием цикла while.
Sample Input:
10
Sample Output:
4'''
# n = int(input())
# i = 1
# while i**2 <= n:
#     i += 1
# else:
#     print(i)
'''Подвиг 8. (На использование цикла while). Начав тренировки, лыжник в первый день пробежал 10 км. 
Каждый следующий день он увеличивал пробег на 10 % от пробега предыдущего дня. 
Определить в какой день он пробежит больше x км (натуральное число x вводится с клавиатуры).
 Результат (искомый день) вывести на экран.
Sample Input:
20
Sample Output:
9'''
# x = float(input())
# d = 1
# l = 10.0
# while l < x:
#     l += l * 0.10
#     d += 1
# print(d)
'''Подвиг 9. (На использование цикла while). Вводятся названия книг (каждое с новой строки). 
Удалить из введенного списка все названия, состоящие из двух и более слов (слова в названиях разделяются пробелом).
 езультат вывести на экран в виде строки из оставшихся названий через пробел.
P. S. Для считывания списка целиком в программе уже записаны начальные строчки
Sample Input:
Муму
Евгений Онегин
Сияние
Мастер и Маргарита
Пиковая дама
Колобок
Sample Output:
Муму Сияние Колобок'''
# import sys
# t = list(map(str.strip, sys.stdin.readlines()))
# print(t)
# i = 0
# while i < len(t):
#     if t[i].count(" ") > 0:
#         t.remove(t[i])
#         continue
#     else:
#         i += 1
# print(*t)
'''Подвиг 1. С помощью функции range() сформируйте следующую последовательность чисел:
0, 1, 2, ..., 10
Результат выведите в виде последовательности чисел, записанных через пробел в одну строчку.
Sample Input:
Sample Output:
0 1 2 3 4 5 6 7 8 9 10'''
# for i in range(0, 11, 1):
#     print(i, end=" ")

'''Подвиг 2. С помощью функции range() сформируйте следующую последовательность чисел:

10, 9, 8, ..., 0

Результат выведите в виде последовательности чисел, записанных через пробел в одну строчку.

Sample Input:

Sample Output:

10 9 8 7 6 5 4 3 2 1 0'''
# print(*range(10, -1, -1))
'''Подвиг 3. С помощью функции range() сформируйте следующую последовательность чисел:

-10, -8, -6, -4, -2

Результат выведите в виде последовательности чисел, записанных через пробел в одну строчку.

Sample Input:

Sample Output:

-10 -8 -6 -4 -2'''
# print(*range(-10, 0, 2))
'''Подвиг 4. С помощью функции range() сформируйте следующую последовательность чисел:

1, 4, 7, 10, 13, 16, 19

Результат выведите в виде последовательности чисел, записанных через пробел в одну строчку.

Sample Input:

Sample Output:

1 4 7 10 13 16 19'''
# for i in range(1,20, 3):
#     print(i, end=" ")
'''
Подвиг 5. Вводятся целые числа в одну строчку через пробел. 
Необходимо преобразовать эти данные в список целых чисел. 
Затем, перебрать этот список в цикле for и просуммировать все нечетные значения. Результат вывести на экран.
Sample Input:
8 11 -2 4 0 13 19 12 7
Sample Output:
50'''
# n = list(map(int, input().split()))
# s = 0
# for i in range(0, len(n), 1):
#     if n[i] % 2 != 0:
#         s += n[i]
# print(s)
'''Подвиг 6. Вводятся названия городов в одну строчку через пробел. 
Необходимо преобразовать входные данные в список. 
Затем, перебрать его циклом for и заменить значения элементов на длину названия соответствующего города. 
Результат вывести на экран в виде последовательности чисел через пробел в одну строчку.
Sample Input:
Москва Уфа Караганда Тверь Минск Казань
Sample Output:
6 3 9 5 5 6'''
# t = list(input().split())
# for i in range(0, len(t)):
#    t[i] = len(t[i])
# print(*t)
'''Подвиг 7. Вводится натуральное число n. С помощью цикла for найти все делители этого числа. 
Найденные делители выводить сразу в столбик без формирования списка.
Sample Input:
12
Sample Output:
1
2
3
4
6
12'''
# n = int(input())
# for i in range(1, n+1, 1):
#     if n % i == 0:
#         print(i)
'''Подвиг 8. Вводится натуральное число n. С помощью цикла for определить, является ли оно простым
 (то есть, делится нацело только на само себя и на 1). Вывести на экран ДА, если n простое и НЕТ - в противном случае.
Sample Input:
11
Sample Output:
ДА'''
# n = int(input())
# count = 0
# for i in range(1, n+1, 1):
#     if n % i == 0:
#         count += 1
# print("ДА" if count <= 2 else "НЕТ")
'''Подвиг 9. Вводится список названий городов в одну строчку через пробел. 
Перебрать все эти названия с помощью цикла for и определить, 
начинается ли название следующего города на последнюю букву предыдущего города в списке. 
Если последними встречаются буквы 'ь', 'ъ', 'ы', то берется следующая с конца буква. 
Вывести на экран ДА, если последовательность удовлетворяет этому правилу и НЕТ - в противном случае.
Sample Input:
Москва Астрахань Новгород Димитровград Душанбе
Sample Output:
ДА'''
# t = list("Москва Астрахань Новгород Димитровград Душанбе".lower().split())
# correct = True
# for i in range(0, len(t)):
#     if t[i][-1] == "ъ" or t[i][-1] == "ы" or t[i][-1] == "ь":
#         t[i] = t[i][0:-1]
#     if i < len(t)-1:
#         if t[i][-1] == t[i+1][0]:
#             correct = True
#         else:
#             correct = False
#             break
# print("ДА" if correct else "НЕТ")
'''Подвиг 10. Вводится натуральное число n. Вычислить сумму всех натуральных чисел меньше n, 
которые кратны или 3 или 5. Результат (сумму) вывести на экран. 
Пример: n = 10, имеем числа: 3, 5, 6, 9. Их сумма равна 23.
Sample Input:
21
Sample Output:
98'''
# n = int(input())
# s = 0
# for i in range(0, n):
#     if (i % 3 == 0) or (i % 5 == 0):
#         s += i
# print(s)
'''Подвиг 1. Вводится строка. Необходимо найти все индексы фрагмента "ра" во введенной строке. 
Вывести в строку через пробелы найденные индексы. 
Если этот фрагмент ни разу не будет найден, то вывести значение -1.
Sample Input:
Барабанщик бил бой в барабан
Sample Output:
2 23'''
# s = "Барабанщик бил бой в барабан".lower()
# if "ра" not in s:
#     print("-1")
# else:
#     for i, l in enumerate(s):
#         if s[i] == "р" and s[i+1] == "а":
#             print(i, end=" ")
'''Подвиг 2. Вводится строка с номером телефона. Ожидается формат ввода:+7(xxx)xxx-xx-xx
где x - это цифра. Размер введенных символов считается верным (то есть, не может быть, 
чтобы отсутствовала какая-либо цифра или была лишняя). Необходимо проверить, 
что введенная строка соответствует этому формату. Вывести ДА, если соответствует и НЕТ - в противном случае.
Sample Input:
+7(123)456-78-9a
Sample Output:
ДА'''

# s = "+7(1234)56-78-99"
# status = True
# count = 0
# if s[0:3] != "+7(" or s[6] != ")" or s[10] != "-" or s[13] != "-":
#     status = False
# else:
#     for i in range(0, len(s)):
#         if s[i].isdigit():
#             count += 1
#     if count != 11:
#         status = False
# print("ДА" if status else "НЕТ")

'''Большой подвиг 3. В виде строки записано арифметическое выражение, например:
"10 + 25 - 12" или "10 + 25 - 12 + 20 - 1 + 3"
и т. д. То есть, количество действий может быть разным.
Необходимо выполнить вычисление и результат отобразить на экране. 
Полагается, что в качестве арифметических операций здесь используется только сложение (+) и вычитание (-), 
а в качестве операндов - целые неотрицательные числа. 
Следует учесть, что эти операторы могут быть записаны как с пробелами, так и без них.
Sample Input:
10+25 - 12
Sample Output:
23'''
# s = "10+25 - 12".replace(" ", "")
# s = s.replace("+", " +")
# s = s.replace("-", " -")
# print(s)
# print(sum(map(int, s.split())))

'''Подвиг 4. Вводится список в виде целых чисел в одну строку через пробел. 
Необходимо сначала сформировать список на основе введенной строки, а затем, 
каждое значение этого списка изменить, возведя в квадрат. 
Отобразить результат на экране в виде строки полученных чисел, записанных через пробел. 
Программу следует реализовать с использованием функции enumerate.
Sample Input:
8 -11 4 3 6
Sample Output:
64 121 16 9 36
'''
# n = list(map(int, "8 -11 4 3 6 0".split()))
# for i in range(0, len(n)):
#     n[i] **= 2
#     print(n[i], end=" ")
'''Подвиг 5. Вводится список в виде целых чисел в одну строку через пробел. 
Сначала нужно сформировать список из введенной строки. Затем, каждый элемент этого списка продублировать один раз.
 Результат отобразить на экране в виде строки полученных чисел, записанных через пробел.
Sample Input:
8 11 2
Sample Output:
8 8 11 11 2 2'''
# l = list(map(int, input().split()))
# for i in l:
#     print(i, i, end=" ")

'''Подвиг 6. Вводится список в виде вещественных чисел в одну строку через пробел. 
С помощью цикла for необходимо найти наименьшее значение в этом списке. Полученный результат вывести на экран.  
Реализовать программу без использования функции min, max и сортировки.
Sample Input:
8.6 9.11 -4.567 -10.0 1.45
Sample Output:
-10.0'''
# n = list(map(float, input().split()))
# m = n[0]
# for i in n:
#     if i < m:
#         m = i
# print(m)
'''Подвиг 7. Вводится список в виде вещественных чисел в одну строку через пробел. 
Сначала нужно сформировать список из введенной строки. Затем, все отрицательные значения в этом списке заменить на -1.0. 
Результат вывести на экран в виде строки чисел через пробел. Программу следует реализовать с использованием функции enumerate.
Sample Input:
-5.67 3.5 6.89 -3.0
Sample Output:
-1.0 3.5 6.89 -1.0'''
# n = list(map(float, input().split()))
# for i, v in enumerate(n):
#     if v < 0:
#         n[i] = -1.0
# print(*n)
'''
Подвиг 2. Вводится список городов в одну строчку через пробел. 
Необходимо создать итератор для этого списка и с помощью итератора вывести на экран в столбик первые два значения 
(названия городов).
Sample Input:
Москва Лондон Берлин Пекин
Sample Output:
Москва
Лондон'''
# t = list(input().split())
# it = iter(t)
# print(next(it))
# print(next(it))
'''
Подвиг 3. Вводится строка. Нужно создать итератор для перебора символов этой строки.
Затем, перебрать через созданный итератор все символы до первого пробела. 
В процессе перебора символы выводить на экран в одну строчку друг за другом (без пробелов). 
Гарантируется, что во введенной строке имеется хотя бы один пробел.
Sample Input:
Возможно-это будет полезно
Sample Output:
Возможно-это'''
#
# it = iter(input())
# n = next(it)
# while n != " ":
#     print(n, end="")
#     n = next(it)
'''Подвиг 4. Вводится четырехзначное целое положительное число. 
Подумайте, как можно определить итератор для перебора его цифр. 
Выведите цифры этого введенного числа (с помощью итератора) в одну строчку через пробел.
Sample Input:
4387
Sample Output:
4 3 8 7'''
# n = input()
# it = iter(n)
# print(next(it), next(it), next(it),next(it), end=" ")
'''Подвиг 1. Вводится натуральное число N (то есть, положительное, целое). 
Требуется создать двумерный (вложенный) список размером N x N элементов, 
состоящий из всех единиц, а затем, в последний столбец записать пятерки. 
Вывести этот список на экран в виде таблицы чисел, как показано в примере ниже.
P.S. Будьте внимательны в конце строк пробелов быть не должно!
Sample Input:
4
Sample Output:
1 1 1 5
1 1 1 5
1 1 1 5
1 1 1 5'''
# N = int(input())
# m = []
# for i in range(0, N):
#     t = []
#     for j in range(0, N):
#         t.append(1)
#     m.append(t)
#     print(*t, end="\n")
# print()
# for i in m:
#     i[-1] = 5
# for i in m:
#     for j in i:
#         print(j, end=" ")
#     print()
'''Подвиг 2. Вводится список из URL-адресов (каждый с новой строки). 
Требуется в них заменить все пробелы на символ дефиса (-). Следует учесть, что может быть несколько подряд идущих пробелов.
 Результат преобразования вывести на экран в виде строк из URL-адресов.
P. S. Для считывания списка целиком в программе уже записаны начальные строчки.
Sample Input:
django chto  eto takoe    poryadok ustanovki
model mtv   marshrutizaciya funkcii  predstavleniya
marshrutizaciya  obrabotka isklyucheniy       zaprosov perenapravleniya
Sample Output:
django-chto-eto-takoe-poryadok-ustanovki
model-mtv-marshrutizaciya-funkcii-predstavleniya
marshrutizaciya-obrabotka-isklyucheniy-zaprosov-perenapravleniya'''
# import sys
# url = list(map(str.strip, sys.stdin.readlines()))
# for i in url:
#     i = '-'.join(i.split())
#     print(i)
'''Подвиг 3. Вводится натуральное число n. Необходимо найти все простые числа, которые меньше этого числа n, 
то есть, в диапазоне [2; n). Результат вывести на экран в строчку через пробел.
Sample Input:
11
Sample Output:
2 3 5 7'''
# n = int(input())
# for i in range(2, n):
#     count = 0
#     for x in range(2, n):
#         if i % x == 0:
#             count += 1
#     if count < 2:
#         print(i, end=" ")
'''
Подвиг 4. Вводится двумерный список размерностью 5 х 5 элементов, состоящий из нулей и, 
в некоторых позициях, единиц (см. пример ввода ниже). Требуется проверить, не касаются ли 
единицы друг друга по горизонтали, вертикали и диагонали. То есть, вокруг каждой единицы должны быть нули. 
Если проверка проходит вывести ДА, иначе - НЕТ.
P. S. Для считывания списка целиком в программе уже записаны начальные строчки.
Sample Input:
1 0 0 0 0
0 0 1 0 1
0 0 0 0 0
0 1 0 1 0
0 0 0 0 0
Sample Output:
ДА'''
# import sys
# s = sys.stdin.readlines()
# m = [list(map(int, x.strip().split())) for x in s]
# flag = "ДА"
# for i in range(1, len(m)):
#     for j in range(1, len(m[i])):
#         if (m[i][j] + m[i][j-1] + m[i-1][j] + m[i-1][j-1]) > 1:
#             flag = "НЕТ"
#             break
# print(flag)
'''
Подвиг 5. Вводится двумерный список размерностью 5 х 5 элементов, состоящий из целых чисел (пример ввода см. ниже). 
Проверьте, является ли этот двумерный список симметричным относительно главной диагонали. 
Главная диагональ — та, которая идёт из левого верхнего угла двумерного массива в правый нижний. 
Выведите на экран ДА, если матрица симметрична и НЕТ - в противном случае.
P. S. Для считывания списка целиком в программе уже записаны начальные строчки.
Sample Input:
2 3 4 5 6
3 2 7 8 9
4 7 2 0 4
5 8 0 2 1
6 9 4 1 2
Sample Output:
ДА'''
# import sys
# # считывание списка из входного потока
# s = sys.stdin.readlines()
# m = [list(map(int, x.strip().split())) for x in s]
# # здесь продолжайте программу (используйте список lst_in)
# flag = 1
# for i in range(5):
#     for j in range(5):
#         if m[i][j] != m[j][i]:
#             flag = 0
#             break
# print("ДА" if flag else "НЕТ")

# https://stepik.org/lesson/567042/step/7?unit=561316
'''Большой подвиг 6. Вводится список целых чисел в одну строку через пробел. Необходимо выполнить его сортировку 
выбором по возрастанию (неубыванию). Идея алгоритма очень проста и проиллюстрирована на рисунке ниже.
Вначале мы рассматриваем первый элемент списка и ищем второй минимальный относительно первого элемента (включая и его). 
На рисунке - это последний элемент со значением -1. Затем, меняем местами первый и последний элементы. 
Переходим ко второму элементу списка и повторяем эту же процедуру, но относительно второго элемента 
(то есть, первый уже не рассматриваем). На рисунке минимальный элемент - это 2, поэтому менять местами здесь ничего не нужно. 
Переходим к 3-му элементы со значением 6. Относительно него находим минимальный элемент - это 3. Меняем их местами. 
Вот идея алгоритма сортировки выбором. Реализуйте его для вводимого списка целых чисел. Результат выведите 
в виде списка чисел одну строку через пробел.
Sample Input:
8 11 -53 2 10 11
Sample Output:
-53 2 8 10 11 11'''

# n = list(map(int, "8 11 -53 2 0 10 11".split()))
# for i in range(len(n)):
#     for j in range(len(n)):
#         if n[i] <= n[j]:
#             n[i], n[j] = n[j], n[i]
# print(*n)
'''Большой подвиг 7. Вводится список целых чисел в одну строку через пробел. 
Необходимо выполнить его сортировку по возрастанию (неубыванию) методом всплывающего пузырька. 
Идея алгоритма проста и показана на рисунке ниже.
При первом проходе перебираем все соседние пары элементов 
и если значение предыдущего элемента (слева) больше значения следующего (справа), то они меняются местами. 
(На рисунке 3 и 2 меняются местами). Следующая пара - это 3 и 6. Они уже выстроены по возрастанию, 
поэтому ничего не делаем и переходим к следующей паре 6 и -1. Меняем значения местами и видим, 
что на последнем месте находится максимальное значение 6, что нам и нужно.
При втором проходе делаем все то же самое, но доходим до предпоследнего элемента, 
так как последнее значение 6 уже отсортировано. На третьем проходе исключаем уже последние два элемента и так далее. 
То есть, в этом алгоритме достаточно сделать N-1 проходов, где N - длина списка.
Вот идея алгоритма сортировки всплывающего пузырька. Реализуйте его для вводимого списка целых чисел.
 Результат выведите в виде списка чисел одну строку через пробел.
Sample Input:
4 5 2 0 6 3 -56 3 -1
Sample Output:
-56 -1 0 2 3 3 4 5 6'''
# n = list(map(int, "-56 -1 0 2 3 3 4 5 6".split()))
# for i in range(0, len(n)):
#     for j in range(1, len(n)-i):
#         if n[j-1] > n[j]:
#             n[j-1], n[j] = n[j], n[j-1]
# print(*n)
'''Подвиг 8. В некоторой стране используются денежные купюры достоинством в 1, 2, 4, 8, 16, 32 и 64.
 водится натуральное число n. Как наименьшим количеством таких денежных купюр можно выплатить сумму n? 
 Вывести на экран список купюр для формирования суммы n (в одну строчку через пробел, начиная с наибольшей и заканчивая наименьшей). 
 Предполагается, что имеется достаточно большое количество купюр всех достоинств.
Sample Input:
221
Sample Output:
64 64 64 16 8 4 1'''
# n = int(input())
# lst = list()
# m = list(map(int, "1 2 4 8 16 32 64".split()))
# for i in range(len(m)-1, -1, -1):
#     c = n // m[i]
#     if c >= 1:
#         for j in range(0, c):
#             lst.append(m[i])
#         n = n - m[i] * c
#         if n == 0:
#             break
# print(*lst)
'''Подвиг 1. Вводятся вещественные числа в строку через пробел. 
Необходимо на их основе сформировать список lst с помощью list comprehension (генератора списков) 
из модулей введенных чисел (в списке должны храниться именно числа, а не строки). 
Результат вывести на экран в виде списка командой:
print(lst)
Sample Input:
5.56 -8.7 1.0 3.14 77.845
Sample Output:
[5.56, 8.7, 1.0, 3.14, 77.845]'''

# print([abs(float(x)) for x in input().split()])
'''Подвиг 2. Вводится семизначное целое положительное число. С помощью list comprehension сформировать список lst, 
содержащий цифры этого числа (в списке должны быть записаны числа, а не строки). Результат вывести на экран список командой:
print(lst)
Sample Input:
4567397
Sample Output:
[4, 5, 6, 7, 3, 9, 7]'''
# n = input()
# print([int(n[x]) for x in range(len(n))])
'''Подвиг 3. Вводится натуральное число N. С помощью list comprehension сформировать двумерный список размером N x N, 
состоящий из нулей, а по главной диагонали - единицы. (Главная диагональ - это элементы, 
идущие по диагонали от верхнего левого угла матрицы до ее нижнего правого угла). 
Результат вывести в виде таблицы чисел как показано в примере ниже.
Sample Input:
4
Sample Output:
1 0 0 0
0 1 0 0
0 0 1 0
0 0 0 1'''
n = 4
m = []
a = []
